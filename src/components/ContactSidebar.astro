---
import { siteMetadata } from "../siteMetadata";

const {
  name,
  github_handle,
  bsky_handle,
  linkedin_handle,
  bio,
  location,
  email,
} = siteMetadata;
---

<aside class="sidebar">
    <div class="avatar-wrapper">
      <!-- Example static placeholder avatar -->
      <img src="/assets/dani.jpeg" alt={name + " avatar"} />
    </div>

    <ul class="details-list">
      <li class="location">
        <!-- Location icon -->
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
          <path
            d="M8 0a6 6 0 0 0-6 6c0 3.313 6 10 6 10s6-6.687 6-10a6 6 0 0 0-6-6zm0 8a2 2 0 1 1 0-4 2 2 0 0 1 0 4z"
          ></path>
        </svg>
        <span>{location}</span>
      </li>
      <li>
        <!-- Email icon -->
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
          <path
            d="M1.75 2h12.5c.966 0 1.75.784 1.75 1.75v8.5A1.75 1.75 0 0 1 14.25 14H1.75A1.75 1.75 0 0 1 0 12.25v-8.5C0 2.784.784 2 1.75 2ZM1.5 12.251c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V5.809L8.38 9.397a.75.75 0 0 1-.76 0L1.5 5.809v6.442Zm13-8.181v-.32a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25v.32L8 7.88Z"
          ></path>
        </svg>
        <a id="emailLink" href={`mailto:${email}`}>{email}</a>
      </li>
    </ul>
    <!-- Social links list -->
    <ul class="details-list">
      <!-- GitHub -->
      <li>
        <!-- GitHub icon -->
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="none"
          role="img"
          style="margin-right: 0.5rem"
          viewBox="0 0 16 16"
        >
          <title>GitHub</title>
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-1.79.33-2.23-.44-2.37-.85-.09-.23-.48-.85-.82-1.02-.28-.15-.68-.52 0-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.67.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.58.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.22 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.57.82 1.28.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.14.45.55.38A8.014 8.014 0 0016 8c0-4.42-3.58-8-8-8z"
            fill="currentColor"></path>
        </svg>
        <a
          rel="nofollow me"
          href={`https://github.com/${github_handle}`}
          target="_blank"
        >
          {github_handle}
        </a>
      </li>
      <!-- Bluesky -->
      <li>
        <!-- Bluesky icon -->
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 16 16"
          role="img"
          width="16"
          height="16"
          style="margin-right: 0.5rem"
        >
          <title>Bluesky</title>
          <path
            fill="currentColor"
            d="M3.468 1.948C5.303 3.325 7.276 6.118 8 7.616c.725-1.498 2.697-4.29 4.532-5.668C13.855.955 16 .186 16 2.632c0 .489-.28 4.105-.444 4.692-.572 2.04-2.653 2.561-4.504 2.246 3.236.551 4.06 2.375 2.281 4.2-3.376 3.464-4.852-.87-5.23-1.98-.07-.204-.103-.3-.103-.218 0-.081-.033.014-.102.218-.379 1.11-1.855 5.444-5.231 1.98-1.778-1.825-.955-3.65 2.28-4.2-1.85.315-3.932-.205-4.503-2.246C.28 6.737 0 3.12 0 2.632 0 .186 2.145.955 3.468 1.948Z"
          ></path>
        </svg>
        <a
          rel="nofollow me"
          href={`https://bsky.app/profile/${bsky_handle}`}
          target="_blank"
        >
          @{bsky_handle}
        </a>
      </li>

      <!-- LinkedIn -->
      <li>
        <!-- LinkedIn icon -->
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="none"
          role="img"
          style="margin-right: 0.5rem"
          viewBox="0 0 16 16"
        >
          <title>LinkedIn</title>
          <g clip-path="url(#clip0)">
            <path
              fill="currentColor"
              d="M14.5455 0H1.45455C.650909 0 0 .650909 0 1.45455V14.5455C0 15.3491.650909 16 1.45455 16H14.5455C15.3491 16 16 15.3491 16 14.5455V1.45455C16 .650909 15.3491 0 14.5455 0zM5.05746 13.0909H2.912V6.18764h2.14546v6.90326zM3.96291 5.20073c-.69164 0-1.25091-.56073-1.25091-1.25091 0-.69018.56073-1.25091 1.25091-1.25091.69091 0 1.25164.56073 1.25164 1.25091 0 .69018-.56073 1.25091-1.25164 1.25091zM13.0938 13.0909h-2.144v-3.3571c0-.80073-.0145-1.83055-1.1149-1.83055-1.11536 0-1.28699.872-1.28699 1.77236v3.41529h-2.144v-6.90326h2.05809v.94327h.02909c.28563-.54255.98327-1.11545 2.02409-1.11545 2.164 0 2.5622 1.42545 2.5622 3.27891v3.79608z"
            ></path>
          </g>
          <defs>
            <clipPath id="clip0">
              <path fill="currentColor" d="M0 0h16v16H0z"></path>
            </clipPath>
          </defs>
        </svg>
        <a
          rel="nofollow me"
          href={`https://www.linkedin.com/in/${linkedin_handle}`}
          target="_blank"
        >
          in/{linkedin_handle}
        </a>
      </li>

      <!-- Twitter/X -->
      <li>
        <!-- “X” icon (formerly Twitter) -->
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 16 16"
          width="16"
          height="16"
          role="img"
          style="margin-right: 0.5rem"
        >
          <title>X (Twitter)</title>
          <path
            fill="currentColor"
            d="M9.332 6.925 14.544 1h-1.235L8.783 6.145 5.17 1H1l5.466 7.78L1 14.993h1.235l4.78-5.433 3.816 5.433H15L9.332 6.925zM7.64 8.848l-.554-.775L2.68 1.91h1.897l3.556 4.975.554.775 4.622 6.466H13.35L7.64 8.848z"
          ></path>
        </svg>
        <a
          rel="nofollow me"
          href="https://twitter.com/danieledagnelli"
          target="_blank"
        >
          @danieledagnelli
        </a>
      </li>
    </ul>
  </aside>

<style>
  .sidebar {
    padding: 1em;
    width: 250px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border: 1px solid var(--text-color);
    box-sizing: border-box;
  }

  /* Mobile styles */
  @media (max-width: 768px) {
    .sidebar {
      width: 100%;
    }
  }

  .avatar-wrapper {
    display: flex;
    justify-content: center;
    margin-bottom: 1rem;
  }

  .avatar-wrapper img {
    border-radius: 50%;
    width: 140px;
    height: 140px;
    object-fit: cover;
  }

  .username {
    text-align: center;
    margin-bottom: 0.5rem;
  }

  .username h1 {
    font-size: 1.25rem;
    margin: 0.25rem 0;
  }

  .username .nickname {
    color: var(--link-color);
    font-size: 0.95rem;
  }

  .status {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1rem;
  }

  .status-emoji {
    margin-right: 0.5rem;
  }

  .bio {
    margin-bottom: 1rem;
    line-height: 1.5;
  }

  .details-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .details-list li svg {
    flex-shrink: 0;
    width: 16px;
    height: 16px;
    margin-right: 0.5rem;
  }

  .details-list li {
    display: flex; /* Align icon and text horizontally */
    align-items: center; /* Vertically center-align the icon and text */
    margin-bottom: 1rem; /* or 2rem, etc. */
  }
  .details-list a {
    text-decoration: none;
    color: inherit;
    flex: 1;
    padding: 0;
    transition: color 0.3s ease; /* optional smooth transition */
  }

  .details-list li a:hover {
    color: white;
  }

  /* In ContactSidebar.astro, inside <style> */
  .details-list li a {
    text-decoration: none;
    color: inherit;
    padding: 0;
    transition: color 0.3s ease;
  }

  .orgs {
    margin-top: 1rem;
  }

  .orgs h2 {
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
    text-decoration: underline;
  }

  .orgs .org-list {
    display: flex;
    gap: 0.5rem;
  }

  .org-list img {
    width: 32px;
    height: 32px;
    border-radius: 50%;
  }
  .location {
    display: block;
    text-align: center;
  }
</style>

<script>
  const linkOutputMap = {
    "mailto:daniele@dagnelli.net": "Opening mail client...",
    "https://github.com/danieledagnelli": "Fetching GitHub profile...",
    "https://bsky.app/profile/dagnelli.net": "Opening Bluesky profile...",
    "https://www.linkedin.com/in/dagnelli": "Opening LinkedIn profile...",
    "https://twitter.com/danieledagnelli": "Opening Twitter profile...",
  };

  document.querySelectorAll(".details-list a").forEach((link) => {
    link.addEventListener("click", (e) => {
      e.preventDefault();
      const url = (link as HTMLAnchorElement)
        .href as keyof typeof linkOutputMap;
      const command = `curl ${url}`;

      const output = linkOutputMap[url] || `Fetching ${url}...`;

      // Simulate the command without showing an alert
      simulateCommand(command, output, () => {
        // After simulation is complete, perform the actual action
        if (url.startsWith("mailto:")) {
          window.location.href = url; // Use default mail client
        } else {
          // Open URLs in a new window/tab
          window.open(url, "_blank", "noopener,noreferrer");
        }
      });
    });
  });

  function simulateCommand(
    command: string,
    output: string | null,
    callback: () => void,
  ) {
    const terminal = document.querySelector(".whoami");
    if (!terminal) return;

    // Find the last prompt that doesn't have content
    let lastPrompt = Array.from(
      terminal.querySelectorAll(".command-content-pair"),
    )
      .reverse()
      .find((prompt) => !prompt.querySelector(".content")?.textContent?.trim());

    if (!lastPrompt) {
      // If no empty prompt exists, create one
      lastPrompt = document.createElement("div");
      lastPrompt.className = "command-content-pair";
      lastPrompt.innerHTML = `
        <p>daniele@dagnelli.net:~$ <span class="typewriter"></span><span class="cursor">|</span></p>
        <p class="content" style="display: none;"></p>
    `;
      terminal.appendChild(lastPrompt);
    }

    const typewriter = lastPrompt.querySelector(".typewriter");
    const content = lastPrompt.querySelector(".content");
    const cursor = lastPrompt.querySelector(".cursor");

    // Reset the typewriter and content
    if (typewriter) typewriter.textContent = "";
    if (content) {
      if (content instanceof HTMLElement) content.style.display = "none";
      content.textContent = output;
    }

    // Start the cursor blinking
    if (cursor) cursor.classList.add("blink");

    processCommand(lastPrompt, command, callback);
  }

  function processCommand(
    pair: Element,
    command: string | any[],
    callback: () => void,
  ) {
    const typewriter = pair.querySelector(".typewriter");
    const content = pair.querySelector(".content");
    const cursor = pair.querySelector(".cursor");
    let index = 0;

    // Remove blinking from previous cursors
    document.querySelectorAll(".cursor.blink").forEach((el) => {
      el.classList.remove("blink");
    });

    // Ensure the current cursor has the blink class
    if (cursor) cursor.classList.add("blink");

    function type() {
      if (index < command.length && typewriter) {
        typewriter.textContent += command[index];
        index++;
        setTimeout(type, 100);
      } else {
        // Show output after a small delay
        setTimeout(() => {
          if (content instanceof HTMLElement) {
            content.style.display = "block";
          }

          // Execute the callback after showing the output
          setTimeout(() => {
            callback();

            // Create new prompt after action is complete
            const existingEmptyPrompt = Array.from(
              document.querySelectorAll(".command-content-pair"),
            )
              .reverse()
              .find((prompt) => {
                const content = prompt.querySelector(".content");
                return !content?.textContent?.trim();
              });

            if (!existingEmptyPrompt) {
              createNewPrompt();
            }
          }, 500); // Delay before creating new prompt
        }, 300); // Delay before showing output
      }
    }

    type();
  }

  function createNewPrompt() {
    const terminal = document.querySelector(".whoami");
    if (!terminal) return;

    const newPrompt = document.createElement("div");
    newPrompt.className = "command-content-pair";
    newPrompt.innerHTML = `
    <p>daniele@dagnelli.net:~$ <span class="typewriter"></span><span class="cursor"></span></p>
    <p class="content" style="display: none;"></p>
`;
    terminal.appendChild(newPrompt);

    // Ensure the new prompt is visible
    newPrompt.scrollIntoView({ behavior: "smooth" });
  }
</script>
